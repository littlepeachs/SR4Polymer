/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.838e+01, tolerance: 4.337e-03
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.863e+00, tolerance: 7.289e-03
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.073e+00, tolerance: 3.370e-03
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.775e+00, tolerance: 2.922e-03
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.964e+01, tolerance: 5.506e-03
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.476e+01, tolerance: 5.737e-03
  model = cd_fast.enet_coordinate_descent(
############ TASK ############
Task:  heat_flow
Task type:  accurate
############ END ############
回归表达式:
#### expression 1.18 + 4.028137923874032e-06 * 1/(x1*x1) + -0.0017210985728747636 * 1/(x1*x2) + -1.0291939561152882e-05 * 1/(x1*x3) + -7.65165993514827e-05 * 1/(x2*x2) + -6.9488507958322226e-06 * 1/(x3*x1) + -0.0030362669787476655 * 1/(x3*x3) + -0.00855568646295116 * exp(x2)/x1 + 2.0749906688022647e-07 * 1/(x1*x1*x1) + -1.4593154388665896e-05 * 1/(x1*x1*x2) + 3.2367987411785454e-07 * 1/(x1*x1*x3) + 2.2060557526930217e-05 * 1/(x1*x2*x2) + -0.0001997559347846072 * 1/(x1*x2*x3) + 3.1396320534701423e-06 * 1/(x1*x3*x3) + 3.87143527323875e-07 * 1/(x2*x2*x2) + -0.0003552695822982708 * 1/(x2*x2*x3) + 0.00017495582285195597 * 1/(x3*x3*x3) + -0.0004537385656684749 * log(x1)*log(x1)/(x1) + -0.0010018983399953212 * log(x2)*log(x2)/(x2) + -2.083960254572548e-06 * log(x1)/(x1*x1) + 0.002498601175140198 * log(x1)/(x1*x2) + -3.893354913368277e-05 * log(x1)/(x1*x3) + -0.00021259798918015922 * log(x1)/(x2*x2) + 2.1340689614488163e-05 * log(x2)/(x1*x1) + 0.001552848296037583 * log(x2)/(x1*x2) + -2.806249883054925e-05 * log(x2)/(x2*x2) + -0.0003380694370268761 * log(x2)/(x3*x3) + -8.708633602832558e-07 * log(x3)/(x1*x1) + 0.0010628936695614218 * log(x3)/(x3*x3)
#### clip_expression 1.18 + 0.0002 * 1/(x3*x3*x3) + 0.0025 * log(x1)/(x1*x2) + 0.0016 * log(x2)/(x1*x2) + 0.0011 * log(x3)/(x3*x3)
#### origin result
Train RMSE: 0.91338
Train R^2: 0.23057
Valid RMSE: 0.73535
Valid R^2: -1.77371
#### clip result
Train RMSE: 1.97410
Train R^2: -2.59423
Valid RMSE: 0.81813
Valid R^2: -2.43335
########### END #########
############ TASK ############
Task:  heat_flow
Task type:  middle_var
############ END ############
回归表达式:
#### expression 0.08 + -5.306880831937833e-83 * exp(x3) + 6.634869631010394e-07 * 1/(x1) + 3.197832675623544e-05 * x3*x3 + 1.1760438552345149e-11 * 1/(x1*x1) + 7.404001766928485e-08 * log(x1)/x1 + -9.29421368757831e-06 * log(x2)/x1 + 6.876041701448921e-07 * log(x3)/x1 + -4.0231784449327025e-07 * exp(x2)/x1 + -6.4864856127984815e-84 * exp(x3)/x1 + 1.9752043654119587e-82 * exp(x3)/x2 + -4.094458015353913e-80 * exp(x3)/x3 + 3.0908138797837504e-08 * x3/x1 + -0.0003029060786545763 * x3/x2 + 5.174052107265716e-05 * x2*x3*x3 + -3.403957584969499e-07 * x3*x3*x3 + -6.843822632714983e-17 * 1/(x1*x1*x1) + 2.7669398534248666e-13 * 1/(x1*x1*x2) + 1.2697641275609876e-11 * 1/(x1*x1*x3) + -5.898061394924322e-06 * 1/(x1*x2*x2) + -1.297187682380716e-05 * 1/(x2*x2*x2) + 0.0006506471893734941 * log(x1)*log(x1)*log(x1) + 4.434043753142286e-08 * log(x1)*log(x1)/(x1) + 6.176977412206334e-07 * log(x1)*log(x2)/(x1) + -5.716262070065328e-08 * log(x1)*log(x3)/(x1) + -2.7410961798161646e-06 * log(x2)*log(x3)/(x1) + 2.576119892938083e-07 * log(x3)*log(x3)/(x1) + -4.817726120267398e-13 * log(x1)/(x1*x1) + -2.673654266675749e-07 * log(x1)/(x1*x2) + -1.7312195696474637e-11 * log(x2)/(x1*x1) + -1.5187912728815197e-05 * log(x2)/(x1*x2) + 4.234339225836215e-12 * log(x3)/(x1*x1) + 9.677788376802296e-07 * log(x3)/(x1*x2) + 0.001595616622613427 * sqrt(x1)*x3*x3 + -0.00010239533076443793 * sqrt(x2)*x3*x3 + 0.0007774923182320159 * sqrt(x3)*x2*x3 + -6.314236222856423e-06 * sqrt(x3)*x3*x3
#### clip_expression 0.08 + 0.0007 * log(x1)*log(x1)*log(x1) + 0.0016 * sqrt(x1)*x3*x3 + 0.0008 * sqrt(x3)*x2*x3
#### origin result
Train RMSE: 0.28084
Train R^2: 0.95672
Valid RMSE: 0.48140
Valid R^2: 0.86809
#### clip result
Train RMSE: 2.85057
Train R^2: -3.45895
Valid RMSE: 2.80487
Valid R^2: -3.47808
########### END #########
############ TASK ############
Task:  heat_flow
Task type:  low_var
############ END ############
回归表达式:
#### expression 0.35 + -1.6931085715545593e-08 * exp(x3) + 4.9886913485593034e-08 * 1/(x1*x1) + -6.003595837589252e-05 * 1/(x1*x2) + -4.588715442685505e-20 * 1/(x2*x1) + 4.161234019224778e-05 * log(x1)/x1 + -0.00010693808498182733 * log(x3)/x1 + -0.0006892978797562068 * exp(x2)/x1 + -1.9228657746713776e-09 * exp(x3)/x1 + -3.397894223950024e-09 * exp(x3)/x2 + 6.808466059317586e-07 * exp(x3)/x3 + -1.2802176468758857e-05 * x3/x1 + 0.0057449327521639434 * x2*x3*x3 + 5.313551632114532e-11 * 1/(x1*x1*x1) + -2.3726881244542255e-10 * 1/(x1*x1*x2) + -1.8356820373863262e-08 * 1/(x1*x1*x3) + -3.49073725216276e-05 * 1/(x1*x2*x2) + 2.8116904478055295e-05 * 1/(x2*x2*x2) + 0.0030438673385112824 * log(x1)*log(x1)*log(x1) + 6.0360462152222326e-06 * log(x1)*log(x1)/(x1) + 1.2904849926251685e-05 * log(x1)*log(x2)/(x1) + 2.4447428473487595e-05 * log(x1)*log(x3)/(x1) + -0.00015242720503095032 * log(x3)*log(x3)/(x1) + -2.9004020389163007e-08 * log(x1)/(x1*x1) + 7.360765928284368e-06 * log(x1)/(x1*x2) + -3.0782824208080614e-08 * log(x2)/(x1*x1) + 2.986362477353075e-05 * log(x2)/(x1*x2) + 1.0230470127321568e-08 * log(x3)/(x1*x1) + -5.2865488900396156e-05 * log(x3)/(x1*x2) + 0.00044185952962890845 * sqrt(x1)*x3*x3
#### clip_expression 0.35 + 0.0057 * x2*x3*x3 + 0.0030 * log(x1)*log(x1)*log(x1) + 0.0004 * sqrt(x1)*x3*x3
#### origin result
Train RMSE: 0.33418
Train R^2: 0.86743
Valid RMSE: 1.72994
Valid R^2: -16.79756
#### clip result
Train RMSE: 0.50858
Train R^2: 0.69296
Valid RMSE: 0.47135
Valid R^2: -0.32127
########### END #########
############ TASK ############
Task:  heat_flow
Task type:  noise_0.02
############ END ############
回归表达式:
#### expression 1.52 + 0.00031892263610679416 * 1/(x1*x1*x1) + -0.009471701775865352 * 1/(x1*x1*x3) + 0.0004291766784981216 * 1/(x1*x2*x2) + -0.0010563229429623934 * 1/(x1*x3*x3) + -0.010141309749724808 * 1/(x2*x2*x3) + 9.903561816440495e-05 * 1/(x3*x3*x3)
#### clip_expression 1.52 + 0.0003 * 1/(x1*x1*x1) + 0.0004 * 1/(x1*x2*x2)
#### origin result
Train RMSE: 1.03249
Train R^2: 0.26477
Valid RMSE: 1.15033
Valid R^2: -0.53615
#### clip result
Train RMSE: 1.38146
Train R^2: -0.31622
Valid RMSE: 0.98182
Valid R^2: -0.11905
########### END #########
############ TASK ############
Task:  heat_flow
Task type:  noise_0.05
############ END ############
回归表达式:
#### expression 0.96 + -9.755599631412607e-07 * 1/(x1*x1) + 8.306584460944162e-06 * 1/(x1*x1*x1) + -0.004465443462469572 * 1/(x1*x3*x3) + 0.0005337017686818513 * 1/(x2*x2*x2) + 0.000764244261366533 * 1/(x2*x2*x3) + -0.0004427718163999995 * 1/(x2*x3*x3) + 2.8916523100306075e-05 * 1/(x3*x3*x3) + 3.186666720800377e-05 * log(x1)/(x1*x1) + 0.004616505119140086 * log(x2)/(x2*x2)
#### clip_expression 0.96 + 0.0005 * 1/(x2*x2*x2) + 0.0008 * 1/(x2*x2*x3) + 0.0046 * log(x2)/(x2*x2)
#### origin result
Train RMSE: 0.73930
Train R^2: 0.25172
Valid RMSE: 0.80731
Valid R^2: 0.14117
#### clip result
Train RMSE: 0.85345
Train R^2: 0.00280
Valid RMSE: 0.84534
Valid R^2: 0.05834
########### END #########
############ TASK ############
Task:  heat_flow
Task type:  noise_0.1
############ END ############
回归表达式:
#### expression 1.23 + -2.1824981359623928e-05 * 1/(x3*x3) + -0.0033639640435648038 * 1/(x1*x1*x1) + 0.0029147526161679826 * 1/(x1*x1*x2) + 0.00017731132116779213 * 1/(x1*x1*x3) + 3.253275354006508e-05 * 1/(x1*x3*x3) + -0.00029434113955468985 * 1/(x2*x2*x2) + -2.51896785348096e-05 * 1/(x2*x3*x3) + -2.3492926093628977e-07 * 1/(x3*x3*x3) + -7.361014889456827e-05 * log(x1)/(x3*x3) + 6.260827464737934e-06 * log(x3)/(x3*x3)
#### clip_expression 1.23 + 0.0029 * 1/(x1*x1*x2) + 0.0002 * 1/(x1*x1*x3)
#### origin result
Train RMSE: 1.07574
Train R^2: 0.15929
Valid RMSE: 2.77596
Valid R^2: -16.24503
#### clip result
Train RMSE: 1.56973
Train R^2: -0.79014
Valid RMSE: 0.96879
Valid R^2: -1.10036
########### END #########
############ TASK ############
Task:  heat_flow
Task type:  noise_0.2
############ END ############
回归表达式:
#### expression /home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.166e+01, tolerance: 2.639e-03
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.273e+00, tolerance: 1.403e-03
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.986e+01, tolerance: 9.511e-03
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 8.103e+01, tolerance: 1.863e-02
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.969e+02, tolerance: 4.284e-02
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.540e+01, tolerance: 1.170e-01
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.854e-02, tolerance: 5.565e-06
  model = cd_fast.enet_coordinate_descent(
1.21 + -1.9556988297173466e-05 * 1/(x1*x1) + -0.0020552096020900754 * 1/(x2*x2) + -0.005553481443180838 * exp(x2)/x1 + -0.00883604746565513 * exp(x3)/x1 + -0.0005365073295648486 * exp(x3)/x2 + 3.009876115312519e-07 * 1/(x1*x1*x1) + -1.4530391401857262e-07 * 1/(x1*x1*x2) + -6.55869079078458e-06 * 1/(x1*x2*x2) + 0.0002996961507947819 * 1/(x2*x2*x2) + -0.009169971361630913 * 1/(x2*x2*x3) + 3.759707324890855e-07 * 1/(x3*x3*x3) + -9.813356501011778e-05 * log(x1)*log(x1)/(x1) + -1.2236475794497759e-05 * log(x1)/(x1*x1) + 1.7610075708944616e-05 * log(x1)/(x1*x2) + -1.42267585514807e-06 * log(x2)/(x1*x1) + 0.0002870772259901432 * log(x2)/(x2*x2) + -2.0610555846064913e-05 * log(x3)/(x1*x1)
#### clip_expression 1.21 + 0.0003 * 1/(x2*x2*x2) + 0.0003 * log(x2)/(x2*x2)
#### origin result
Train RMSE: 1.06973
Train R^2: 0.20220
Valid RMSE: 10.98252
Valid R^2: -140.38604
#### clip result
Train RMSE: 3.62254
Train R^2: -8.14889
Valid RMSE: 142.94445
Valid R^2: -23950.73317
########### END #########
############ TASK ############
Task:  heat_flow
Task type:  noise_0.5
############ END ############
回归表达式:
#### expression 0.83 + -0.0019865709002194506 * 1/(x2*x2) + -1.3669185228864012e-07 * 1/(x3*x3) + -0.0028384206585454273 * 1/(x1*x1*x1) + -0.0014826874716392135 * 1/(x1*x1*x2) + 0.0005910727916202384 * 1/(x1*x2*x2) + 9.57050382942375e-09 * 1/(x1*x3*x3) + 7.547129541196239e-05 * 1/(x2*x2*x2) + -0.0003292978986999971 * 1/(x2*x2*x3) + 2.450677987173226e-07 * 1/(x2*x3*x3) + -3.403126767829568e-11 * 1/(x3*x3*x3) + 3.7091853626720255e-09 * log(x1)/(x3*x3) + 0.0010316983009716406 * log(x2)/(x2*x2) + -1.298948610542406e-06 * log(x2)/(x3*x3) + -1.949593914338691e-08 * log(x3)/(x3*x3)
#### clip_expression 0.83 + 0.0006 * 1/(x1*x2*x2) + 0.0010 * log(x2)/(x2*x2)
#### origin result
Train RMSE: 0.74160
Train R^2: 0.16627
Valid RMSE: 0.49414
Valid R^2: -2.27966
#### clip result
Train RMSE: 0.94361
Train R^2: -0.34982
Valid RMSE: 0.51083
Valid R^2: -2.50491
########### END #########
############ TASK ############
Task:  heat_flow
Task type:  num_10
############ END ############
回归表达式:
#### expression 3.09 + -0.07913074172881873 * exp(x2)/x1 + 0.0011580296168450166 * 1/(x1*x1*x1) + -0.0066198218052701055 * 1/(x1*x3*x3) + 5.249914275390202e-06 * 1/(x2*x2*x2) + -0.0005083275770185593 * 1/(x2*x2*x3) + -0.0538387468572296 * 1/(x2*x3*x3) + -0.001079705433871234 * 1/(x3*x3*x3) + -3.480133126714987e-05 * log(x2)/(x2*x2)
#### clip_expression 3.09 + 0.0012 * 1/(x1*x1*x1)
#### origin result
Train RMSE: 0.54437
Train R^2: 0.83101
Valid RMSE: 1.87013
Valid R^2: -1368.52575
#### clip result
Train RMSE: 3.64218
Train R^2: -6.56481
Valid RMSE: 3.29296
Valid R^2: -4245.20608
########### END #########
############ TASK ############
Task:  heat_flow
Task type:  num_25
############ END ############
回归表达式:
#### expression 1.39 + -0.011075218693691487 * 1/(x1*x1*x1) + -0.00207068953017689 * 1/(x2*x2*x2) + -0.006506110932034411 * 1/(x3*x3*x3)
#### clip_expression 1.39
#### origin result
Train RMSE: 0.97165
Train R^2: 0.23444
Valid RMSE: 859.70328
Valid R^2: -7364820.48158
#### clip result
Train RMSE: 1.14899
Train R^2: -0.07049
Valid RMSE: 1.23491
Valid R^2: -14.19628
########### END #########
############ TASK ############
Task:  heat_flow
Task type:  num_100
############ END ############
回归表达式:
#### expression 1.26 + -0.0017545072126147305 * 1/(x2*x2) + -0.0001449050470243595 * 1/(x3*x3) + -0.006907921889512862 * exp(x1)/x3 + 3.727882768948871e-05 * 1/(x1*x1*x1) + -0.003443664689082907 * 1/(x1*x1*x3) + -0.007603775351927244 * 1/(x1*x2*x2) + -0.00037704933247700997 * 1/(x1*x3*x3) + 0.0011866457593013738 * 1/(x2*x2*x2) + -0.004757071719582517 * 1/(x2*x2*x3) + 0.0002622493579703478 * 1/(x2*x3*x3) + 3.6962324806634563e-06 * 1/(x3*x3*x3) + -0.0007071467329068666 * log(x3)*log(x3)/(x3) + -0.00016929797327605494 * log(x1)/(x1*x1) + -3.428971125877314e-05 * log(x1)/(x3*x3) + -0.0016814709477710348 * log(x2)/(x1*x1) + 0.0034816872134945855 * log(x2)/(x2*x2) + -0.000918096743627649 * log(x2)/(x3*x3) + 9.009475931689198e-06 * log(x3)/(x3*x3)
#### clip_expression 1.26 + 0.0012 * 1/(x2*x2*x2) + 0.0003 * 1/(x2*x3*x3) + 0.0035 * log(x2)/(x2*x2)
#### origin result
Train RMSE: 0.95103
Train R^2: 0.23922
Valid RMSE: 1.24613
Valid R^2: -0.11673
#### clip result
Train RMSE: 2.37267
Train R^2: -3.73530
Valid RMSE: 3.10814
Valid R^2: -5.94744
########### END #########
############ TASK ############
Task:  heat_flow
Task type:  num_200
############ END ############
回归表达式:
#### expression 1.16 + -3.701074860075233e-05 * 1/(x1*x1) + -0.0006513891443877139 * exp(x3)/x1 + 1.0438934706848452e-07 * 1/(x1*x1*x1) + -0.00011409487897579973 * 1/(x1*x1*x2) + 9.772941676473361e-06 * 1/(x1*x1*x3) + -0.0005177157109193483 * 1/(x1*x2*x2) + -0.003214168557164152 * 1/(x1*x2*x3) + -0.0005138783179539319 * 1/(x1*x3*x3) + 0.0003184045908196104 * 1/(x2*x2*x2) + -0.0021359148793819614 * 1/(x2*x3*x3) + 1.8632647257914316e-05 * 1/(x3*x3*x3) + -0.0004286528569594293 * log(x1)*log(x1)/(x1) + -1.579129622053757e-05 * log(x1)/(x1*x1) + 0.0019790570467576613 * log(x1)/(x1*x2) + 5.529331140032002e-05 * log(x2)/(x1*x1) + 0.002899576264948298 * log(x2)/(x2*x2) + -5.1602170104150375e-05 * log(x3)/(x1*x1)
#### clip_expression 1.16 + 0.0003 * 1/(x2*x2*x2) + 0.0020 * log(x1)/(x1*x2) + 0.0029 * log(x2)/(x2*x2)
#### origin result
Train RMSE: 0.98906
Train R^2: 0.15999
Valid RMSE: 0.81777
Valid R^2: 0.08190
#### clip result
Train RMSE: 1.06541
Train R^2: 0.02528
Valid RMSE: 0.85965
Valid R^2: -0.01455
########### END #########
############ TASK ############
Task:  heat_flow
Task type:  num_500
############ END ############
回归表达式:
#### expression 1.05 + -4.05690152068377e-07 * 1/(x1*x1) + -0.00039338881258061927 * 1/(x2*x2) + -0.0003396178149699523 * 1/(x3*x3) + 0.00032915357490334655 * log(x1)/x1 + -0.0025577816621389134 * exp(x3)/x1 + 2.8605267599137456e-09 * 1/(x1*x1*x1) + -8.697077373176648e-07 * 1/(x1*x1*x2) + 1.1607990695186102e-07 * 1/(x1*x1*x3) + 7.061958623872501e-05 * 1/(x1*x2*x2) + -0.0006250024347795553 * 1/(x1*x2*x3) + 8.435826959776137e-05 * 1/(x1*x3*x3) + -2.5291936244253118e-06 * 1/(x2*x2*x2) + 1.5030960161503268e-05 * 1/(x2*x2*x3) + 2.458915804045201e-06 * 1/(x2*x3*x3) + 1.2725164413610632e-06 * 1/(x3*x3*x3) + -8.042864364397801e-05 * log(x1)*log(x1)/(x1) + -0.0029018776592276765 * log(x2)*log(x2)/(x2) + -0.0024076557379339083 * log(x3)*log(x3)/(x3) + -3.6774010995007637e-07 * log(x1)/(x1*x1) + 0.002365612582660505 * log(x1)/(x1*x2) + 1.3332422342726517e-05 * log(x2)/(x1*x1) + -0.00023553916950082675 * log(x2)/(x2*x2) + 0.00029597696138584565 * log(x2)/(x2*x3) + -0.00014431812990261774 * log(x2)/(x3*x3) + 7.081381727679896e-06 * log(x3)/(x2*x2) + 2.563453792112249e-05 * log(x3)/(x2*x3)
#### clip_expression 1.05 + 0.0003 * log(x1)/x1 + 0.0024 * log(x1)/(x1*x2) + 0.0003 * log(x2)/(x2*x3)
#### origin result
Train RMSE: 0.96621
Train R^2: 0.12825
Valid RMSE: 9641.10096
Valid R^2: -64158665.03474
#### clip result
Train RMSE: 1.70748
Train R^2: -1.72247
Valid RMSE: 1.28855
Valid R^2: -0.14605
########### END #########
############ TASK ############
Task:  plate_height
Task type:  accurate
############ END ############
回归表达式:
#### expression 0.59 + 0.0021916938134873246 * 1/(x2*x2) + 0.19101715004418368 * exp(x1)/x2 + -0.0014158401317462624 * 1/(x1*x1*x2) + -2.372178260566797e-05 * 1/(x2*x2*x2) + 0.0010957883206348274 * log(x1)/(x1*x1) + -0.007372279342394472 * log(x2)/(x2*x2)
#### clip_expression 0.59 + 0.0022 * 1/(x2*x2) + 0.1910 * exp(x1)/x2 + 0.0011 * log(x1)/(x1*x1)
#### origin result
Train RMSE: 0.50010
Train R^2: 0.99145
Valid RMSE: 0.49567
Valid R^2: 0.86963
#### clip result
Train RMSE: 2.21852
Train R^2: 0.83176
Valid RMSE: 0.48634
Valid R^2: 0.87449
########### END #########
############ TASK ############
Task:  plate_height
Task type:  middle_var
############ END ############
回归表达式:
#### expression /home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.059e-01, tolerance: 4.340e-04
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.918e+01, tolerance: 6.720e+00
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.456e+01, tolerance: 1.381e+00
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.731e+01, tolerance: 3.655e-01
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.052e+02, tolerance: 3.625e+01
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.559e+01, tolerance: 3.139e-02
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.125e-02, tolerance: 6.905e-03
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.915e+01, tolerance: 1.177e-01
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.049e+02, tolerance: 1.153e+00
  model = cd_fast.enet_coordinate_descent(
0.04 + -8.724225179699447e-08 * 1/(x1*x1) + 2.0342075059904716e-10 * 1/(x1*x1*x1) + -8.75749987895197e-08 * 1/(x1*x1*x2) + -4.266797339471953e-07 * 1/(x1*x2*x2) + 1.814811607567228e-05 * 1/(x2*x2*x2) + -5.668336148861204e-06 * log(x1)*log(x1)/(x1) + 4.1049921377471145e-05 * log(x1)*log(x2)/(x1) + -2.1374640515032748e-08 * log(x1)/(x1*x1) + -1.08147144964273e-06 * log(x1)/(x1*x2) + 1.6178335661305e-08 * log(x2)/(x1*x1)
#### clip_expression 0.04
#### origin result
Train RMSE: 0.02571
Train R^2: 0.52497
Valid RMSE: 0.01249
Valid R^2: -4.22290
#### clip result
Train RMSE: 0.04051
Train R^2: -0.17945
Valid RMSE: 0.02907
Valid R^2: -27.31523
########### END #########
############ TASK ############
Task:  plate_height
Task type:  low_var
############ END ############
回归表达式:
#### expression 0.16 + -1.3963138810664062e-05 * 1/(x1*x1) + 5.048563169127637e-07 * 1/(x1*x1*x1) + -5.748468561264968e-06 * 1/(x1*x1*x2) + 0.0005127030759637157 * 1/(x1*x2*x2) + 0.0003865710764978695 * 1/(x2*x2*x2) + -0.00016380453889619956 * log(x1)*log(x1)/(x1) + 7.483800898192886e-06 * log(x1)/(x1*x1)
#### clip_expression 0.16 + 0.0005 * 1/(x1*x2*x2) + 0.0004 * 1/(x2*x2*x2)
#### origin result
Train RMSE: 0.12867
Train R^2: 0.84741
Valid RMSE: 205.48506
Valid R^2: -808706.13089
#### clip result
Train RMSE: 0.17112
Train R^2: 0.73011
Valid RMSE: 0.23903
Valid R^2: -0.09432
########### END #########
############ TASK ############
Task:  plate_height
Task type:  noise_0.02
############ END ############
回归表达式:
#### expression 0.23 + 0.14608269003343965 * 1/(x2) + -0.0009042448616734352 * 1/(x1*x1) + 0.005857415930751174 * 1/(x2*x2) + -0.026595215118745116 * log(x2)/x2 + 0.23957069344443738 * exp(x1)/x2 + 1.758966867128171e-05 * 1/(x1*x1*x1) + -0.0005662317370820465 * 1/(x1*x1*x2) + -0.006399971821579216 * 1/(x1*x2*x2) + -1.958691132438647e-06 * 1/(x2*x2*x2) + 0.010250198058501154 * log(x2)*log(x2)/(x2) + 1.897492544906412e-06 * log(x1)/(x1*x1) + 0.006444326161138292 * log(x1)/(x1*x2) + -0.001825810922806034 * log(x1)/(x2*x2) + -0.0007468595948429811 * log(x2)/(x1*x1) + 0.00013658685049462387 * log(x2)/(x2*x2)
#### clip_expression 0.23 + 0.1461 * 1/(x2) + 0.0059 * 1/(x2*x2) + 0.2396 * exp(x1)/x2 + 0.0103 * log(x2)*log(x2)/(x2) + 0.0064 * log(x1)/(x1*x2) + 0.0001 * log(x2)/(x2*x2)
#### origin result
Train RMSE: 0.42446
Train R^2: 0.99989
Valid RMSE: 0.62696
Valid R^2: 0.92286
#### clip result
Train RMSE: 34.54579
Train R^2: 0.28961
Valid RMSE: 1.34057
Valid R^2: 0.64731
########### END #########
############ TASK ############
Task:  plate_height
Task type:  noise_0.05
############ END ############
回归表达式:
#### expression 0.35 + 0.031089664724030325 * 1/(x2*x2) + 0.2291727921521532 * exp(x1)/x2 + 1.744037020323564e-05 * 1/(x1*x1*x1) + -0.001424608388201034 * 1/(x1*x1*x2) + -0.005946656610047448 * 1/(x1*x2*x2) + -0.0003220947274700027 * 1/(x2*x2*x2)
#### clip_expression 0.35 + 0.0311 * 1/(x2*x2) + 0.2292 * exp(x1)/x2
#### origin result
Train RMSE: 0.43813
Train R^2: 0.99944
Valid RMSE: 0.40229
Valid R^2: 0.94169
#### clip result
Train RMSE: 11.85534
Train R^2: 0.59301
Valid RMSE: 0.36999
Valid R^2: 0.95068
########### END #########
############ TASK ############
Task:  plate_height
Task type:  noise_0.1
############ END ############
回归表达式:
#### expression 0.38 + 0.011167635652598887 * 1/(x2*x2) + 0.25310549488771583 * exp(x1)/x2 + 2.7737608964043934e-05 * 1/(x1*x1*x1) + -0.00442449127715182 * 1/(x1*x1*x2) + -0.00414920366857548 * 1/(x1*x2*x2) + 0.0003620192761565682 * 1/(x2*x2*x2) + -5.031234443582975e-05 * log(x1)/(x1*x1) + 0.0017918252789025967 * log(x2)/(x2*x2)
#### clip_expression 0.38 + 0.0112 * 1/(x2*x2) + 0.2531 * exp(x1)/x2 + 0.0004 * 1/(x2*x2*x2) + 0.0018 * log(x2)/(x2*x2)
#### origin result
Train RMSE: 0.54531
Train R^2: 0.99675
Valid RMSE: 0.19731
Valid R^2: 0.87770
#### clip result
Train RMSE: 1.52500
Train R^2: 0.97455
Valid RMSE: 0.36448
Valid R^2: 0.58269
########### END #########
############ TASK ############
Task:  plate_height
Task type:  noise_0.2
############ END ############
回归表达式:
#### expression 0.80 + 0.3078887499277971 * 1/(x2) + 1.4618308615320885e-06 * 1/(x2*x2) + 0.00733562374328947 * log(x1)/x2 + -0.0015052355655128418 * log(x2)/x2 + 0.05201572058412054 * exp(x1)/x2 + -0.03666000995559126 * exp(x2)/x2 + 0.16043670026719756 * x1/x2 + -0.0016779103378893876 * 1/(x1*x1*x1) + -0.00770992100206259 * 1/(x1*x1*x2) + 9.444336159736911e-07 * 1/(x1*x2*x2) + 3.434562247637779e-11 * 1/(x2*x2*x2) + -0.11212724269513583 * log(x2)*log(x2)*log(x2) + -0.013847878644990198 * log(x1)*log(x1)/(x2) + -0.001283852382660497 * log(x1)*log(x2)/(x2) + 0.00014832227836856918 * log(x2)*log(x2)/(x2) + 0.001958478119281318 * log(x1)/(x1*x2) + -2.9736288012894197e-06 * log(x1)/(x2*x2) + 7.889965926980749e-05 * log(x2)/(x1*x2) + -1.5453757154479178e-07 * log(x2)/(x2*x2)
#### clip_expression 0.80 + 0.3079 * 1/(x2) + 0.0073 * log(x1)/x2 + 0.0520 * exp(x1)/x2 + 0.1604 * x1/x2 + 0.0001 * log(x2)*log(x2)/(x2) + 0.0020 * log(x1)/(x1*x2)
#### origin result
Train RMSE: 1.56292
Train R^2: 0.99973
Valid RMSE: 0.47033
Valid R^2: 0.54522
#### clip result
Train RMSE: 31.82141
Train R^2: 0.88827
Valid RMSE: 0.54045
Valid R^2: 0.39951
########### END #########
############ TASK ############
Task:  plate_height
Task type:  noise_0.5
############ END ############
回归表达式:
#### expression 0.48 + 0.008646664269476355 * 1/(x2*x2) + 0.27407442451893704 * exp(x1)/x2 + -0.0007592204322237096 * 1/(x1*x1*x1) + -0.0024447755335448938 * 1/(x1*x2*x2) + -0.00018987118126238234 * 1/(x2*x2*x2) + 0.015665918525112236 * log(x2)*log(x2)/(x2) + -0.0005505838919630841 * log(x2)/(x2*x2)
#### clip_expression 0.48 + 0.0086 * 1/(x2*x2) + 0.2741 * exp(x1)/x2 + 0.0157 * log(x2)*log(x2)/(x2)
#### origin result
Train RMSE: 0.81060
Train R^2: 0.91627
Valid RMSE: 644.24668
Valid R^2: -1312185.70504
#### clip result
Train RMSE: 6.82109
Train R^2: -4.92909
Valid RMSE: 0.32163
Valid R^2: 0.67296
########### END #########
############ TASK ############
Task:  plate_height
Task type:  num_10
############ END ############
回归表达式:
#### expression 0.99 + 0.018015431250335764 * 1/(x2*x2*x2)
#### clip_expression 0.99 + 0.0180 * 1/(x2*x2*x2)
#### origin result
Train RMSE: 0.40487
Train R^2: 0.98416
Valid RMSE: 0.95123
Valid R^2: -6873.43841
#### clip result
Train RMSE: 0.40496
Train R^2: 0.98415
Valid RMSE: 0.95516
Valid R^2: -6930.46367
########### END #########
############ TASK ############
Task:  plate_height
Task type:  num_25
############ END ############
回归表达式:
#### expression 0.38 + 0.228476386348533 * exp(x1)/x2 + 6.939849006300622e-05 * 1/(x1*x1*x1) + -0.00015284653073703236 * 1/(x2*x2*x2) + 0.0008222015502499662 * log(x1)/(x1*x1)
#### clip_expression 0.38 + 0.2285 * exp(x1)/x2 + 0.0008 * log(x1)/(x1*x1)
#### origin result
Train RMSE: 0.37087
Train R^2: 0.96016
Valid RMSE: 0.70633
Valid R^2: 0.93992
#### clip result
Train RMSE: 0.75748
Train R^2: 0.83382
Valid RMSE: 0.69887
Valid R^2: 0.94118
########### END #########
############ TASK ############
Task:  plate_height
Task type:  num_100
############ END ############
回归表达式:
#### expression 0.30 + -1.578777053283514e-05 * 1/(x1*x1) + 0.011979121053600975 * 1/(x2*x2) + 0.24852633580447928 * exp(x1)/x2 + -0.0005457843217369783 * exp(x2)/x1 + 6.583581226618359e-07 * 1/(x1*x1*x1) + -0.0003355966294844921 * 1/(x1*x1*x2) + -0.0036791805993282235 * 1/(x1*x2*x2) + -0.00027343041991562773 * 1/(x2*x2*x2) + 0.01875729513290658 * log(x2)*log(x2)/(x2) + -5.4879592948742394e-05 * log(x1)/(x1*x1) + 0.0012528868060899317 * log(x1)/(x2*x2) + -0.0002689190261629003 * log(x2)/(x1*x1) + -0.0017227467954960124 * log(x2)/(x2*x2)
#### clip_expression 0.30 + 0.0120 * 1/(x2*x2) + 0.2485 * exp(x1)/x2 + 0.0188 * log(x2)*log(x2)/(x2) + 0.0013 * log(x1)/(x2*x2)
#### origin result
Train RMSE: 0.36566
Train R^2: 0.99091
Valid RMSE: 0.41803
Valid R^2: 0.98365
#### clip result
Train RMSE: 5.62634
Train R^2: -1.15144
Valid RMSE: 0.56017
Valid R^2: 0.97063
########### END #########
############ TASK ############
Task:  plate_height
Task type:  num_200
############ END ############
回归表达式:
#### expression /home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.254e+03, tolerance: 4.377e+02
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.085e-01, tolerance: 1.169e-04
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.929e-04, tolerance: 1.035e-07
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.053e+00, tolerance: 4.673e-04
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.416e-02, tolerance: 8.934e-05
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.929e-01, tolerance: 6.715e-05
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.377e-01, tolerance: 1.603e-04
  model = cd_fast.enet_coordinate_descent(
0.20 + -0.00019993206160476588 * 1/(x1*x1) + 0.007180067040237812 * 1/(x2*x2) + 0.26576036802890163 * exp(x1)/x2 + 4.3315980487469025e-06 * 1/(x1*x1*x1) + -3.5531429857967285e-05 * 1/(x1*x1*x2) + -0.0037269535350069973 * 1/(x1*x2*x2) + -3.925230064668143e-05 * 1/(x2*x2*x2) + 0.010176115755082583 * log(x2)*log(x2)/(x2) + 7.657644415938629e-05 * log(x1)/(x1*x1) + 0.0013248055093909594 * log(x1)/(x2*x2) + -0.0004981399665638293 * log(x2)/(x2*x2)
#### clip_expression 0.20 + 0.0072 * 1/(x2*x2) + 0.2658 * exp(x1)/x2 + 0.0102 * log(x2)*log(x2)/(x2) + 0.0013 * log(x1)/(x2*x2)
#### origin result
Train RMSE: 0.41149
Train R^2: 0.99765
Valid RMSE: 0.35048
Valid R^2: 0.97558
#### clip result
Train RMSE: 7.48438
Train R^2: 0.22249
Valid RMSE: 0.54421
Valid R^2: 0.94113
########### END #########
############ TASK ############
Task:  plate_height
Task type:  num_500
############ END ############
回归表达式:
#### expression -0.18 + -0.0006775993495095422 * 1/(x1) + 1.0300781530513603 * 1/(x2) + -4.2735491661561536e-06 * 1/(x1*x1) + -0.00020326937141535445 * 1/(x1*x2) + -6.801588106877873e-20 * 1/(x2*x1) + 0.0003362323137862844 * 1/(x2*x2) + 0.000984306462749765 * log(x1)/x1 + 0.15489180611721812 * log(x1)/x2 + 0.00292806206582845 * log(x2)/x2 + 0.05150130642854593 * exp(x1)/x2 + 1.887195090112169e-09 * 1/(x1*x1*x1) + 1.0877593529088013e-06 * 1/(x1*x1*x2) + -0.0002671839402210394 * 1/(x1*x2*x2) + -1.477830590843176e-08 * 1/(x2*x2*x2) + 0.00021183248054815274 * log(x1)*log(x1)/(x1) + 0.0036348547024689006 * log(x1)*log(x2)/(x1) + -0.1193880818139624 * log(x1)*log(x2)/(x2) + 0.0025251767149331653 * log(x2)*log(x2)/(x1) + -0.006472038410106055 * log(x2)*log(x2)/(x2) + 1.3225188195727118e-06 * log(x1)/(x1*x1) + -0.0005794125085033759 * log(x1)/(x1*x2) + 5.67598940206094e-05 * log(x1)/(x2*x2) + 3.7553789011584215e-06 * log(x2)/(x1*x1) + -2.220808693970537e-07 * log(x2)/(x1*x2) + 3.5808832767090384e-06 * log(x2)/(x2*x2)
#### clip_expression -0.18 + 1.0301 * 1/(x2) + 0.0003 * 1/(x2*x2) + 0.0010 * log(x1)/x1 + 0.1549 * log(x1)/x2 + 0.0029 * log(x2)/x2 + 0.0515 * exp(x1)/x2 + 0.0002 * log(x1)*log(x1)/(x1) + 0.0036 * log(x1)*log(x2)/(x1) + 0.0025 * log(x2)*log(x2)/(x1)
#### origin result
Train RMSE: 0.87869
Train R^2: 0.99993
Valid RMSE: 258.57035
Valid R^2: -486.70645
#### clip result
Train RMSE: 16.78744
Train R^2: 0.97424
Valid RMSE: 75.78984
Valid R^2: -40.90087
########### END #########
############ TASK ############
Task:  avrami
Task type:  accurate
############ END ############
回归表达式:
#### expression 0.18 + -0.00021383355764278495 * exp(x2)/x3 + 3.6182427081231944e-06 * 1/(x1*x1*x1) + -2.7250272515092742e-05 * 1/(x1*x1*x3) + -5.15058952688375e-05 * 1/(x1*x3*x3) + 2.2326080579394874e-06 * 1/(x3*x3*x3) + 2.871826796282676e-06 * log(x1)/(x1*x1) + 2.0777817312980903e-05 * log(x3)/(x3*x3)
#### clip_expression 0.18
#### origin result
Train RMSE: 0.15825
Train R^2: 0.14324
Valid RMSE: 0.22922
Valid R^2: -0.16285
#### clip result
Train RMSE: 0.17424
Train R^2: -0.03871
Valid RMSE: 0.21985
Valid R^2: -0.06977
########### END #########
############ TASK ############
Task:  avrami
Task type:  middle_var
############ END ############
回归表达式:
#### expression 1.00 + -1.8881557418376212e-46 * exp(x3) + -8.561732963121568e-46 * exp(x3)/x1 + 3.41374887122855e-45 * exp(x3)/x2 + -7.571084221018468e-44 * exp(x3)/x3 + 5.457469549020095e-08 * sqrt(x3)*x3*x3
#### clip_expression 1.00
#### origin result
Train RMSE: 0.00494
Train R^2: 0.05569
Valid RMSE: 0.38856
Valid R^2: -0.24046
#### clip result
Train RMSE: 0.00523
Train R^2: -0.05587
Valid RMSE: 0.38926
Valid R^2: -0.24497
########### END #########
############ TASK ############
Task:  avrami
Task type:  low_var
############ END ############
回归表达式:
#### expression 0.70 + -2.3641773684288943e-05 * exp(x3) + -1.9192663558099095e-05 * 1/(x1*x1) + 0.00011134421079838586 * exp(x2)/x1 + -0.004149308761919279 * exp(x2)/x3 + -9.883443236629726e-06 * exp(x3)/x1 + 1.515398552084266e-05 * exp(x3)/x2 + 0.0007728041974845196 * x2*x3*x3 + 0.0006383791483811288 * x3*x3*x3 + 3.664517437400323e-08 * 1/(x1*x1*x1) + -2.517029148830021e-05 * 1/(x1*x1*x2) + -0.00042382969524902504 * 1/(x1*x1*x3) + -1.1910622966757693e-05 * log(x1)/(x1*x1) + 8.20957949800875e-06 * log(x3)/(x1*x1)
#### clip_expression 0.70 + 0.0001 * exp(x2)/x1 + 0.0008 * x2*x3*x3 + 0.0006 * x3*x3*x3
#### origin result
Train RMSE: 0.16727
Train R^2: 0.76048
Valid RMSE: 0.16344
Valid R^2: -190.50920
#### clip result
Train RMSE: 0.39277
Train R^2: -0.32060
Valid RMSE: 0.21523
Valid R^2: -331.09978
########### END #########
############ TASK ############
Task:  avrami
Task type:  noise_0.02
############ END ############
回归表达式:
#### expression 0.16 + -5.883639694157451e-05 * exp(x2)/x1 + -0.0002862838241454247 * exp(x2)/x3 + 2.6593083336761574e-07 * 1/(x1*x1*x1) + -3.277010655849193e-05 * 1/(x1*x1*x3) + -4.7062968610628903e-05 * 1/(x1*x3*x3) + 7.09382391551081e-07 * 1/(x3*x3*x3)
#### clip_expression 0.16
#### origin result
Train RMSE: 0.09884
Train R^2: 0.33502
Valid RMSE: 1.41877
Valid R^2: -146.74835
#### clip result
Train RMSE: 0.13046
Train R^2: -0.15840
Valid RMSE: 0.12173
Valid R^2: -0.08773
########### END #########
############ TASK ############
Task:  avrami
Task type:  noise_0.05
############ END ############
回归表达式:
#### expression 0.18 + -3.491188587168288e-05 * exp(x2)/x1 + -2.709755596457857e-05 * exp(x2)/x3 + 1.5591463836156218e-05 * 1/(x1*x1*x1) + -6.0439165774613304e-05 * 1/(x1*x1*x3) + 2.94538384286061e-05 * 1/(x1*x3*x3) + 3.5521732221446373e-06 * 1/(x3*x3*x3) + 0.00015859195783681827 * log(x1)/(x1*x1) + 9.252052138292352e-05 * log(x3)/(x3*x3)
#### clip_expression 0.18 + 0.0002 * log(x1)/(x1*x1)
#### origin result
Train RMSE: 0.13085
Train R^2: 0.23351
Valid RMSE: 115.33518
Valid R^2: -682409.43175
#### clip result
Train RMSE: 0.33930
Train R^2: -4.15422
Valid RMSE: 35.21807
Valid R^2: -63627.71757
########### END #########
############ TASK ############
Task:  avrami
Task type:  noise_0.1
############ END ############
回归表达式:
#### expression 0.15 + -1.5635493930923966e-08 * 1/(x1*x1) + -0.00022798017675286129 * exp(x2)/x1 + -0.00023483109558651975 * exp(x2)/x3 + 8.718435429966906e-11 * 1/(x1*x1*x1) + -3.888589155771801e-12 * 1/(x1*x1*x3) + -5.559796413839219e-06 * 1/(x3*x3*x3) + -1.1810225627075637e-10 * log(x1)/(x1*x1)
#### clip_expression 0.15
#### origin result
Train RMSE: 0.11318
Train R^2: 0.23702
Valid RMSE: 0.10811
Valid R^2: 0.13611
#### clip result
Train RMSE: 0.13435
Train R^2: -0.07516
Valid RMSE: 0.12156
Valid R^2: -0.09219
########### END #########
############ TASK ############
Task:  avrami
Task type:  noise_0.2
############ END ############
回归表达式:
#### expression 0.16 + -0.000291377606418251 * exp(x2)/x1 + -2.842764400577927e-05 * exp(x2)/x3 + 1.0007821446919652e-06 * 1/(x1*x1*x1) + -3.1515916072447275e-05 * 1/(x3*x3*x3)
#### clip_expression 0.16
#### origin result
Train RMSE: 0.12704
Train R^2: 0.20642
Valid RMSE: 0.11920
Valid R^2: 0.29902
#### clip result
Train RMSE: 0.14692
Train R^2: -0.06134
Valid RMSE: 0.14638
Valid R^2: -0.05712
########### END #########
############ TASK ############
Task:  avrami
Task type:  noise_0.5
############ END ############
回归表达式:
#### expression 0.19 + -0.00014870319393861745 * exp(x2)/x1 + -0.0002909820610875719 * exp(x2)/x3 + 5.126596633456568e-07 * 1/(x1*x1*x1) + -3.2201150713557356e-05 * 1/(x1*x1*x3) + 1.4421882523300007e-05 * 1/(x1*x3*x3) + 8.974741953276506e-07 * 1/(x3*x3*x3) + 2.5758964450281702e-05 * log(x3)/(x3*x3)
#### clip_expression 0.19
#### origin result
Train RMSE: 0.17997
Train R^2: 0.19201
Valid RMSE: 0.22325
Valid R^2: 0.14317
#### clip result
Train RMSE: 0.21108
Train R^2: -0.11145
Valid RMSE: 0.24169
Valid R^2: -0.00423
########### END #########
############ TASK ############
Task:  avrami
Task type:  num_10
############ END ############
回归表达式:
#### expression 0.23 + -0.0007357559549053421 * 1/(x1*x1*x1) + -0.0001955150052531142 * 1/(x3*x3*x3)
#### clip_expression 0.23
#### origin result
Train RMSE: 0.11623
Train R^2: 0.34493
Valid RMSE: 0.75174
Valid R^2: -1529.94996
#### clip result
Train RMSE: 0.14790
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.573e-04, tolerance: 4.045e-05
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.102e+00, tolerance: 3.135e-04
  model = cd_fast.enet_coordinate_descent(
/home/liwentao/miniconda3/envs/poly/lib/python3.9/site-packages/sklearn/linear_model/_coordinate_descent.py:628: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.086e+00, tolerance: 9.250e-04
  model = cd_fast.enet_coordinate_descent(
Train R^2: -0.06070
Valid RMSE: 0.20994
Valid R^2: -118.40200
########### END #########
############ TASK ############
Task:  avrami
Task type:  num_25
############ END ############
回归表达式:
#### expression 0.21 + -0.000138350190140182 * exp(x2)/x1 + -0.0003216200317504797 * exp(x2)/x3 + 5.409813415623642e-06 * 1/(x1*x1*x1) + -8.923143401506252e-05 * 1/(x1*x1*x3) + -1.4984996980950383e-05 * 1/(x1*x3*x3) + 4.028478305552144e-07 * 1/(x3*x3*x3) + 7.30537222505705e-05 * log(x1)/(x1*x1)
#### clip_expression 0.21
#### origin result
Train RMSE: 0.10409
Train R^2: 0.46434
Valid RMSE: 0.17562
Valid R^2: 0.17583
#### clip result
Train RMSE: 0.16097
Train R^2: -0.28107
Valid RMSE: 0.19581
Valid R^2: -0.02451
########### END #########
############ TASK ############
Task:  avrami
Task type:  num_100
############ END ############
回归表达式:
#### expression 0.16 + -3.819315334373965e-05 * exp(x2)/x3 + -2.743097187469483e-05 * 1/(x1*x1*x3) + 1.2058637076752748e-05 * 1/(x3*x3*x3) + 2.618411547691034e-05 * log(x1)/(x1*x1) + 0.00014678643973380006 * log(x3)/(x3*x3)
#### clip_expression 0.16 + 0.0001 * log(x3)/(x3*x3)
#### origin result
Train RMSE: 0.13534
Train R^2: 0.15838
Valid RMSE: 0.13553
Valid R^2: 0.09768
#### clip result
Train RMSE: 0.16948
Train R^2: -0.31981
Valid RMSE: 0.14015
Valid R^2: 0.03521
########### END #########
############ TASK ############
Task:  avrami
Task type:  num_200
############ END ############
回归表达式:
#### expression 0.14 + -0.00014125462482926916 * exp(x2)/x1 + -7.735871675385549e-05 * exp(x2)/x3 + 2.5095619999532798e-08 * 1/(x1*x1*x1) + -2.9218356206512787e-06 * 1/(x1*x1*x2) + 5.094440651163572e-07 * 1/(x1*x1*x3) + 7.241053129789026e-08 * 1/(x1*x3*x3) + -2.80572120248186e-05 * 1/(x2*x3*x3) + 2.1099044731059713e-07 * 1/(x3*x3*x3) + 4.210923040590541e-07 * log(x1)/(x1*x1) + 1.1959913967496578e-05 * log(x2)/(x3*x3) + 3.50764743058328e-06 * log(x3)/(x1*x1) + 1.5756825233445667e-06 * log(x3)/(x3*x3)
#### clip_expression 0.14
#### origin result
Train RMSE: 0.12888
Train R^2: 0.15242
Valid RMSE: 0.11969
Valid R^2: 0.12019
#### clip result
Train RMSE: 0.14203
Train R^2: -0.02949
Valid RMSE: 0.13234
Valid R^2: -0.07566
########### END #########
############ TASK ############
Task:  avrami
Task type:  num_500
############ END ############
回归表达式:
#### expression 0.16 + -2.142357972751881e-05 * 1/(x1*x1) + -0.00010867923710015337 * exp(x2)/x1 + -8.967675842895377e-05 * exp(x2)/x3 + -9.24823909716163e-08 * 1/(x1*x1*x1) + -2.066492183524354e-05 * 1/(x1*x1*x2) + 1.0574606235608415e-06 * 1/(x1*x1*x3) + -6.3327341014203124e-06 * 1/(x1*x3*x3) + -3.4220643558269956e-05 * 1/(x2*x3*x3) + 3.655146389980991e-07 * 1/(x3*x3*x3) + 2.9186072395987755e-05 * log(x2)/(x1*x1) + 6.0213285096348065e-06 * log(x2)/(x3*x3) + -1.1342150872413122e-05 * log(x3)/(x1*x1) + 5.5554836108110705e-06 * log(x3)/(x3*x3)
#### clip_expression 0.16
#### origin result
Train RMSE: 0.14105
Train R^2: 0.13971
Valid RMSE: 0.67888
Valid R^2: -23.56852
#### clip result
Train RMSE: 0.15343
Train R^2: -0.01789
Valid RMSE: 0.14487
Valid R^2: -0.11872
########### END #########
